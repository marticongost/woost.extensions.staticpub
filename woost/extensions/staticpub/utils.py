"""

.. moduleauthor:: Mart√≠ Congost <marti.congost@whads.com>
"""
from typing import Iterable, Tuple

import cherrypy
from woost import app
from woost.models import (
    PublishableObject,
    Publishable,
    User,
    get_publishable_models
)

from .export import Export

EXPORT_HEADER = "X-Woost-Extensions-Staticpub-Export"
USER_AGENT = "woost.extensions.staticpub"


def get_current_export() -> Export:
    """Get the `~woost.extensions.staticpub.export.Export` object that is being
    generated by the current HTTP request.
    """
    export_id = cherrypy.request.headers.get(EXPORT_HEADER)

    if export_id:
        return Export.get_instance(int(export_id))
    else:
        return None


def iter_exportable_languages(
        publishable: Publishable,
        user: User = None) -> Iterable[str]:
    """Iterates over all the translations for the given object that can be
    statically exported.

    :param publishable: The publishable object to evaluate.

    :param user: The user for which the export should be performed. Defaults to
        the active user.

    :return: An iterable sequence of language codes.
    """
    if publishable.x_staticpub_exportable and publishable.enabled:

        if user is None:
            user = app.user

        if publishable.per_language_publication:
            for language in publishable.enabled_translations:
                if publishable.is_accessible(
                    user=user,
                    language=language,
                    website=PublishableObject.any_website
                ):
                    yield language
        else:
            if publishable.is_accessible(
                user=user,
                website=PublishableObject.any_website
            ):
                yield None


def iter_all_exportable_items(
        user: User = None) -> Iterable[PublishableObject]:
    """Iterates over all the items that can be statically exported.

    :param user: The user for which the export should be performed. Defaults to
        the active user.

    :return: An iterable sequence of publishable objects.
    """
    if user is None:
        user = app.user

    for cls in get_publishable_models():

        items = cls.select()

        if cls.get_member("x_staticpub_exportable"):
            items.add_filter(cls.x_staticpub_exportable.equal(True))
        else:
            all_items = items
            items = (item for item in all_items if item.x_staticpub_exportable)

        yield from items


def iter_all_exportable_content(
        user: User = None) -> Iterable[Tuple[PublishableObject, str]]:
    """Iterates over all the content that can be statically exported.

    :param user: The user for which the export should be performed. Defaults to
        the active user.

    :return: An iterable sequence of pairs of
        `woost.models.publishableobject.PublishableObject` and language codes.
    """
    if user is None:
        user = app.user

    for item in iter_all_exportable_items(user):
        for language in iter_exportable_languages(publishable, user):
            yield publishable, language

