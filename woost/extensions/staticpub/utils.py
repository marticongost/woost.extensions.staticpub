"""

.. moduleauthor:: Mart√≠ Congost <marti.congost@whads.com>
"""
from typing import Iterable, Tuple

from woost.models import PublishableObject, Publishable, User

from .export import Export

EXPORT_HEADER = "X-Woost-Extensions-Staticpub-Export"
USER_AGENT = "woost.extensions.staticpub"


def get_current_export() -> Export:
    """Get the `~woost.extensions.staticpub.export.Export` object that is being
    generated by the current HTTP request.
    """
    export_id = cherrypy.request.headers.get(EXPORT_HEADER)

    if export_id:
        return Export.get_instance(int(export_id))
    else:
        return None


def iter_exportable_languages(
        publishable: Publishable,
        user: User = None) -> Iterable[str]:
    """Iterates over all the translations for the given object that can be
    statically exported.

    :param publishable: The publishable object to evaluate.

    :param user: The user for which the export should be performed. Defaults to
        the anonymous user.

    :return: An iterable sequence of language codes.
    """

    if publishable.x_staticpub_exportable:

        if user is None:
            user = User.require_instance(qname="woost.anonymous_user")

        if publishable.per_language_publication:
            for language in publishable.enabled_translations:
                if publishable.is_accessible(
                    user=user,
                    language=language,
                    website="any"
                ):
                    yield language
        else:
            if publishable.is_accessible(user=user, website="any"):
                yield None


def iter_all_exportable_content() -> Iterable[Tuple[PublishableObject, str]]:
    """Iterates over all the content that can be statically exported.

    :return: An iterable sequence of pairs of
        `woost.models.publishableobject.PublishableObject` and language codes.
    """
    anon = User.require_instance(qname="woost.anonymous_user")

    for cls in get_publishable_models():

        items = cls.select()

        if cls is Publishable:
            items.add_filter(Publishable.x_staticpub_exportable.equal(True))

        for publishable in items:
            for language in iter_exportable_languages(publishable, anon):
                yield publishable, language

